{"ts":1357765490839,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1357765495372,"patch":[[{"diffs":[[1," /* ===========================================================\n * bootstrap-modalmanager.js v2.0\n * ===========================================================\n * Copyright 2012 Jordan Schroter.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n!function ($) {\n\n    \"use strict\"; // jshint ;_;\n\n\t/* MODAL MANAGER CLASS DEFINITION\n\t* ====================== */\n\n\tvar ModalManager = function (element, options) {\n\t\tthis.init(element, options);\n\t}\n\n\tModalManager.prototype = {\n\n\t\tconstructor: ModalManager,\n\n\t\tinit: function (element, options) {\n\t\t\tthis.$element = $(element);\n\t\t\tthis.options = $.extend({}, $.fn.modalmanager.defaults, this.$element.data(), typeof options == 'object' && options);\n\t\t\tthis.stack = [];\n\t\t\tthis.backdropCount = 0;\n\t\t},\n\n\t\tcreateModal: function (element, options) {\n\t\t\t$(element).modal($.extend({ manager: this }, options));\n\t\t},\n\n\t\tappendModal: function (modal) {\n\t\t\tthis.stack.push(modal);\n\n\t\t\tvar that = this;\n\n\t\t\tmodal.$element.on('show.modalmanager', targetIsSelf(function (e) {\n\t\t\t\tmodal.isShown = true;\n\n\t\t\t\tvar transition = $.support.transition && modal.$element.hasClass('fade');\n\t\t\t\t\n\t\t\t\tthat.$element\n\t\t\t\t\t.toggleClass('modal-open', that.hasOpenModal())\t\t\n\t\t\t\t\t.toggleClass('page-overflow', $(window).height() < that.$element.height());\n\t\t\t\n\t\t\t\tmodal.$parent = modal.$element.parent();\n\t\t\t\t\n\t\t\t\tmodal.$container = that.createContainer(modal);\n\n\t\t\t\tmodal.$element.appendTo(modal.$container);\n\n\t\t\t\tvar modalOverflow = $(window).height() < modal.$element.height() || modal.options.modalOverflow;\n\t\t\t\t\t\n\t\t\t\tthat.backdrop(modal, function () {\n\n\t\t\t\t\tmodal.$element.show();\n\n\t\t\t\t\tif (transition) {\n\t\t\t\t\t\tmodal.$element[0].style.display = 'run-in'; \n\t\t\t\t\t\tmodal.$element[0].offsetWidth;\n\t\t\t\t\t\tmodal.$element.one($.support.transition.end, function () { modal.$element[0].style.display = 'block' });\n\t\t\t\t\t}\n\n\t\t\t\t\tmodal.$element\n\t\t\t\t\t\t.toggleClass('modal-overflow', modalOverflow)\n\t\t\t\t\t\t.css('margin-top', modalOverflow ? 0 : 0 - modal.$element.height()/2)\n\t\t\t\t\t\t.addClass('in')\n\t\t\t\t\t\t.attr('aria-hidden', false);\n\t\t\t\t\t\n\t\t\t\t\tvar complete = function () {\n\t\t\t\t\t\tthat.setFocus();\n\t\t\t\t\t\tmodal.$element.triggerHandler('shown');\n\t\t\t\t\t}\n\n\t\t\t\t\ttransition ?\n\t\t\t\t\t\tmodal.$element.one($.support.transition.end, complete) :\n\t\t\t\t\t\tcomplete();\n\t\t\t\t});\n\t\t\t}));\n\n\t\t\tmodal.$element.on('hidden.modalmanager', targetIsSelf(function (e) {\n\n\t\t\t\tthat.backdrop(modal);\n\n\t\t\t\tif (modal.$backdrop){\n\t\t\t\t\t$.support.transition && modal.$element.hasClass('fade')?\n\t\t\t\t\t\tmodal.$backdrop.one($.support.transition.end, function () { that.destroyModal(modal) }) :\n\t\t\t\t\t\tthat.destroyModal(modal);\n\t\t\t\t} else {\n\t\t\t\t\tthat.destroyModal(modal);\n\t\t\t\t}\n\n\t\t\t}));\n\n\t\t\tmodal.$element.on('destroy.modalmanager', targetIsSelf(function (e) {\n\t\t\t\tthat.removeModal(modal);\n\t\t\t}));\n\t\t},\n\n\t\tdestroyModal: function (modal) {\n\n\t\t\tmodal.destroy();\n\n\t\t\tvar hasOpenModal = this.hasOpenModal();\n\n\t\t\tthis.$element.toggleClass('modal-open', hasOpenModal);\n\t\t\t\n\t\t\tif (!hasOpenModal){\n\t\t\t\tthis.$element.removeClass('page-overflow');\n\t\t\t}\n\n\t\t\tthis.removeContainer(modal);\n\n\t\t\tthis.setFocus();\n\t\t},\n\n\t\thasOpenModal: function () {\n\t\t\tfor (var i = 0; i < this.stack.length; i++){\n\t\t\t\tif (this.stack[i].isShown) return true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\tsetFocus: function () {\n\t\t\tvar topModal;\n\n\t\t\tfor (var i = 0; i < this.stack.length; i++){\n\t\t\t\tif (this.stack[i].isShown) topModal = this.stack[i];\n\t\t\t}\n\n\t\t\tif (!topModal) return;\n\n\t\t\ttopModal.focus();\n\n\t\t},\n\n\t\tremoveModal: function (modal) {\n\t\t\tmodal.$element.off('.modalmanager');\n\t\t\tif (modal.$backdrop) this.removeBackdrop.call(modal);\n\t\t\tthis.stack.splice(this.getIndexOfModal(modal), 1);\n\t\t},\n\n\t\tgetModalAt: function (index) {\n\t\t\treturn this.stack[index];\n\t\t},\n\n\t\tgetIndexOfModal: function (modal) {\n\t\t\tfor (var i = 0; i < this.stack.length; i++){\n\t\t\t\tif (modal === this.stack[i]) return i;\n\t\t\t}\n\t\t},\n\n\t\tremoveBackdrop: function (modal) {\n\t\t\tmodal.$backdrop.remove();\n\t\t\tmodal.$backdrop = null;\n\t\t}, \n\n\t\tcreateBackdrop: function (animate) {\n\t\t\tvar $backdrop;\n\n\t\t\tif (!this.isLoading) {\n\t\t\t\t$backdrop = $('<div class=\"modal-backdrop ' + animate + '\" />')\n\t\t\t\t\t.appendTo(this.$element);\n\n\t\t\t} else {\n\t\t\t\t$backdrop = this.$loading;\n\t\t\t\t$backdrop.off('.modalmanager');\n\t\t\t\tthis.$spinner.remove();\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.$loading = this.$spinner = null;\n\t\t\t}\n\n\t\t\treturn $backdrop\n\t\t},\n\n\t\tremoveContainer: function (modal) {\n\t\t\tmodal.$container.remove();\n\t\t\tmodal.$container = null;\n\t\t}, \n\n\t\tcreateContainer: function (modal) {\n\t\t\tvar $container;\n\n\t\t\t$container = $('<div class=\"modal-scrollable\">')\n\t\t\t\t.css('z-index', getzIndex( 'modal', \n\t\t\t\t\tmodal ? this.getIndexOfModal(modal) : this.stack.length ))\n\t\t\t\t.appendTo(this.$element);\n\n\t\t\tif (modal && modal.options.backdrop != 'static') {\n\t\t\t\t$container.on('click.modal', targetIsSelf(function (e) {\n\t\t\t\t\tmodal.hide();\n\t\t\t\t}));\n\t\t\t} else if (modal) {\n\t\t\t\t$container.on('click.modal', targetIsSelf(function (e) {\n\t\t\t\t\tmodal.attention();\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn $container;\n\n\t\t},\n\n\t\tbackdrop: function (modal, callback) {\n\t\t\tvar animate = modal.$element.hasClass('fade') ? 'fade' : '',\n\t\t\t\tshowBackdrop = modal.options.backdrop && \n\t\t\t\t\tthis.backdropCount < this.options.backdropLimit;\n\n\t\t\tif (modal.isShown && showBackdrop) {\n\t\t\t\tvar doAnimate = $.support.transition && animate && !this.isLoading;\n\n\n\t\t\t\tmodal.$backdrop = this.createBackdrop(animate);\n\n\t\t\t\tmodal.$backdrop.css('z-index', getzIndex( 'backdrop', this.getIndexOfModal(modal) ))\n\n\t\t\t\tif (doAnimate) modal.$backdrop[0].offsetWidth // force reflow\n\n\t\t\t\tmodal.$backdrop.addClass('in')\n\n\t\t\t\tthis.backdropCount += 1;\n\n\t\t\t\tdoAnimate ?\n\t\t\t\t\tmodal.$backdrop.one($.support.transition.end, callback) :\n\t\t\t\t\tcallback();\n\n\t\t\t} else if (!modal.isShown && modal.$backdrop) {\n\t\t\t\tmodal.$backdrop.removeClass('in');\n\n\t\t\t\tthis.backdropCount -= 1;\n\n\t\t\t\tvar that = this;\n\n\t\t\t\t$.support.transition && modal.$element.hasClass('fade')?\n\t\t\t\t\tmodal.$backdrop.one($.support.transition.end, function () { that.removeBackdrop(modal) }) :\n\t\t\t\t\tthat.removeBackdrop(modal);\n\n\t\t\t} else if (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t},\n\n\t\tremoveLoading: function () {\n\t\t\tthis.$loading && this.$loading.remove();\n\t\t\tthis.$loading = null;\n\t\t\tthis.isLoading = false;\n\t\t},\n\n\t\tloading: function (callback) {\n\t\t\tcallback = callback || function () { };\n\t\t\t\n\t\t\tthis.$element\n\t\t\t\t.toggleClass('modal-open', !this.isLoading || this.hasOpenModal())\n\t\t\t\t.toggleClass('page-overflow', $(window).height() < this.$element.height());\n\t\t\t\n\t\t\tif (!this.isLoading) {\n\n\t\t\t\tthis.$loading = this.createBackdrop('fade');\n\n\t\t\t\tthis.$loading[0].offsetWidth // force reflow\t\n\n\t\t\t\tthis.$loading\n\t\t\t\t\t.css('z-index', getzIndex('backdrop', this.stack.length))\n\t\t\t\t\t.addClass('in');\n\n\t\t\t\tvar $spinner = $(this.options.spinner)\n\t\t\t\t\t.css('z-index', getzIndex('modal', this.stack.length))\n\t\t\t\t\t.appendTo(this.$element)\n\t\t\t\t\t.addClass('in');\n\n\t\t\t\tthis.$spinner = $(this.createContainer())\n\t\t\t\t\t.append($spinner)\n\t\t\t\t\t.on('click.modalmanager', $.proxy(this.loading, this));\n\n\t\t\t\tthis.isLoading = true;\n\n\t\t\t\t$.support.transition ?\n\t\t\t\tthis.$loading.one($.support.transition.end, callback) :\n\t\t\t\tcallback();\n\n\t\t\t} else if (this.isLoading && this.$loading) {\n\t\t\t\tthis.$loading.removeClass('in');\n\n\t\t\t\tif (this.$spinner) this.$spinner.remove();\n\n\t\t\t\tvar that = this;\n\t\t\t\t$.support.transition ?\n\t\t\t\t\tthis.$loading.one($.support.transition.end, function () { that.removeLoading() }) :\n\t\t\t\t\tthat.removeLoading();\n\n\t\t\t} else if (callback) {\n\t\t\t\tcallback(this.isLoading);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* PRIVATE METHODS\n\t* ======================= */\n\n\t// computes and caches the zindexes\n\tvar getzIndex = (function () {\n\t\tvar zIndexFactor, \n\t\t\tbaseIndex = {};\n\n\t\treturn function (type, pos) {\n\n\t\t\tif (typeof zIndexFactor === 'undefined'){\n\t\t\t\tvar $baseModal = $('<div class=\"modal hide\" />').appendTo('body'),\n\t\t\t\t\t$baseBackdrop = $('<div class=\"modal-backdrop hide\" />').appendTo('body');\n\n\t\t\t\tbaseIndex['modal'] = +$baseModal.css('z-index'),\n\t\t\t\tbaseIndex['backdrop'] = +$baseBackdrop.css('z-index'),\n\t\t\t\tzIndexFactor = baseIndex['modal'] - baseIndex['backdrop'];\n\t\t\t\t\n\t\t\t\t$baseModal.remove();\n\t\t\t\t$baseBackdrop.remove();\n\t\t\t\t$baseBackdrop = $baseModal = null;\n\t\t\t}\n\n\t\t\treturn baseIndex[type] + (zIndexFactor * pos);\n\n\t\t}\n\t}())\n\n\t// make sure the event target is the modal itself in order to prevent \n\t// other components such as tabsfrom triggering the modal manager. \n\t// if Boostsrap namespaced events, this would not be needed.\n\tfunction targetIsSelf(callback){\n\t\treturn function (e) {\n\t\t\tif (this === e.target){\n\t\t\t\treturn callback.apply(this, arguments);\n\t\t\t} \n\t\t}\n\t}\n\n\n\t/* MODAL MANAGER PLUGIN DEFINITION\n\t* ======================= */\n\n\t$.fn.modalmanager = function (option) {\n\t\treturn this.each(function () {\n\t\t\tvar $this = $(this), \n\t\t\t\tdata = $this.data('modalmanager');\n\n\t\t\tif (!data) $this.data('modalmanager', (data = new ModalManager(this, option)))\n\t\t\tif (typeof option === 'string') data[option]()\n\t\t})\n\t}\n\n\t$.fn.modalmanager.defaults = {\n\t\tbackdropLimit: 999,\n\t\tspinner: '<div class=\"loading-spinner fade\" style=\"width: 200px; margin-left: -100px;\"><div class=\"progress progress-striped active\"><div class=\"bar\" style=\"width: 100%;\"></div></div></div>'\n\t}\n\n\t$.fn.modalmanager.Constructor = ModalManager\n\n}(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":9751}]],"length":9751,"saved":false}
